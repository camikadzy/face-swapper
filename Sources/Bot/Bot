import telegram
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, ChatAction
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, CallbackContext

from Sources.Util.Configs import get_telegram_token
from Sources.Util.State import TaskState
from functools import wraps


def send_upload_photo(func):
    """Sends typing action while processing func command."""

    @wraps(func)
    def command_func(update, context, *args, **kwargs):
        context.bot.send_chat_action(chat_id=update.effective_message.chat_id, action=ChatAction.UPLOAD_PHOTO)
        return func(update, context, *args, **kwargs)

    return command_func


class Bot:
    chats_ids_with_choices = dict()
    chats_ids_with_states = dict()  # id: index

    photos_files = list()
    session_state = TaskState.WAITING_FOR_PHOTOS
    target_photo_filename = ""

    admin_id = ""

    def __init__(self):
        self.bot = telegram.Bot(get_telegram_token())
        self.updater = Updater(get_telegram_token(), use_context=True)

        self.updater.start_polling()

        @self.bot.message_handler(commands=["start"])
        def start_message(message):
            self.chats_ids_with_choices[message.chat_id] = None

            photos = message.photo

            if len(photos) == 0:
                if self.session_state == TaskState.WAITING_FOR_PHOTOS:
                    self.bot.reply_to(message, "Добрый день! Жду Ваших фото")
                elif self.session_state == TaskState.WAITING_FOR_CHOICES:
                    self.send_gallery(message, "Выберите то фото, на котором Вы получились лучше всего")
            else:
                if self.admin_id == -1:
                    self.admin_id = message.chat_id

                file_name = "photos/{}".format(message.photo[-1].file_id)
                self.bot.getFile(message.photo[-1].file_id).download(file_name)

                self.photos_files.append(file_name)

        @self.bot.message_handler(commands=["photos_sent"])
        def start_message(message):
            if message.chat_id == self.admin_id:
                self.session_state = TaskState.WAITING_FOR_CHOICES

                self.send_gallery(message, "Выберите целевую фотографию:")

    def send_gallery(self, chat_id: int, reply_text: str):
        keyboard = [
            [
                InlineKeyboardButton("<", callback_data='>'),
                InlineKeyboardButton(">", callback_data='<'),
            ],
            [InlineKeyboardButton("✅", callback_data='v')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)
        self.bot.send_message(chat_id, text=reply_text)
        self.bot.send_photo(chat_id, photo=open(self.photos_files[0], 'rb'), reply_markup=reply_markup)

    @send_upload_photo
    def button(self, update: Update, context: CallbackContext) -> None:
        query = update.callback_query
        query.answer()

        data = query.data
        index = self.chats_ids_with_states[update.message.chat_id]

        if data == '>':
            if index + 1 < len(self.photos_files):
                index += 1
                query.edit_message_media(media=open(self.photos_files[index], 'rb'))
        elif data == '<':
            if index > 0:
                index -= 1
                query.edit_message_media(media=open(self.photos_files[index], 'rb'))
        else:
            if update.message.chat_id == self.admin_id and self.target_photo_filename == "":
                self.target_photo_filename = self.photos_files[index]
                self.bot.delete_message(update.message)

                self.send_gallery(update.message.chat_id, "Выберите то фото, на котором Вы получились лучше всего")
            else:
                pass
                # mark the photos and send to choice
